#include "Noise.hpp"
#include "Maths.hpp"

static size_t permutation[] = {
	151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,

	
	151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,

	
	151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};

f32 perlin(f32 x, f32 y, f32 z) {
	auto ease = [] (f32 x) -> f32 {
		return ((6 * x - 15) * x + 10) * x * x * x;
	};

	auto lerp = [] (f32 t, f32 a, f32 b) -> f32 {
		return a + t * (b - a);
	};

	auto grad = [] (size_t hash, f32 x, f32 y, f32 z) -> f32 {
		size_t h = hash & 15;
		f32 u = h < 8 ? x : y;
		f32 v = h < 4 ? y : ((h == 12 || h == 14) ? x : z);
		return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
	};

	i64 X = (i64)floor(x) & 255;
	i64 Y = (i64)floor(y) & 255;
	i64 Z = (i64)floor(z) & 255;

	f32 xf = x - floor(x);
	f32 yf = y - floor(y);
	f32 zf = z - floor(z);
	f32 u = ease(xf);
	f32 v = ease(yf);
	f32 w = ease(zf);

	i64 A  = permutation[X + 0] + Y + 0;
	i64 AA = permutation[A + 0] + Z + 0;
	i64 AB = permutation[A + 1] + Z + 0;
	i64 B  = permutation[X + 1] + Y + 0;
	i64 BA = permutation[B + 0] + Z + 0;
	i64 BB = permutation[B + 1] + Z + 0;

	f32 grad000 = grad(permutation[AA + 0], xf + 0, yf + 0, zf + 0);
	f32 grad100 = grad(permutation[BA + 0], xf - 1, yf + 0, zf + 0);
	f32 grad010 = grad(permutation[AB + 0], xf + 0, yf - 1, zf + 0);
	f32 grad110 = grad(permutation[BB + 0], xf - 1, yf - 1, zf + 0);
	f32 grad001 = grad(permutation[AA + 1], xf + 0, yf + 0, zf - 1);
	f32 grad101 = grad(permutation[BA + 1], xf - 1, yf + 0, zf - 1);
	f32 grad011 = grad(permutation[AB + 1], xf + 0, yf - 1, zf - 1);
	f32 grad111 = grad(permutation[BB + 1], xf - 1, yf - 1, zf - 1);

	f32 u0 = lerp(u, grad000, grad100);
	f32 u1 = lerp(u, grad010, grad110);
	f32 u2 = lerp(u, grad001, grad101);
	f32 u3 = lerp(u, grad011, grad111);

	f32 v0 = lerp(v, u0, u1);
	f32 v1 = lerp(v, u2, u3);

	return lerp(w, v0, v1);

	// Vector3f grid000 = { xf - 0, yf - 0, zf - 0 };
	// Vector3f grid100 = { xf - 1, yf - 0, zf - 0 };
	// Vector3f grid010 = { xf - 0, yf - 1, zf - 0 };
	// Vector3f grid110 = { xf - 1, yf - 1, zf - 0 };
	// Vector3f grid001 = { xf - 0, yf - 0, zf - 1 };
	// Vector3f grid101 = { xf - 1, yf - 0, zf - 1 };
	// Vector3f grid011 = { xf - 0, yf - 1, zf - 1 };
	// Vector3f grid111 = { xf - 1, yf - 1, zf - 1 };

	// size_t v000 = permutation[(size_t)permutation[(size_t)permutation[X - 0] + Y - 0] + Z - 0];
	// size_t v100 = permutation[(size_t)permutation[(size_t)permutation[X - 1] + Y - 0] + Z - 0];
	// size_t v010 = permutation[(size_t)permutation[(size_t)permutation[X - 0] + Y - 1] + Z - 0];
	// size_t v110 = permutation[(size_t)permutation[(size_t)permutation[X - 1] + Y - 1] + Z - 0];
	// size_t v001 = permutation[(size_t)permutation[(size_t)permutation[X - 0] + Y - 0] + Z - 1];
	// size_t v101 = permutation[(size_t)permutation[(size_t)permutation[X - 1] + Y - 0] + Z - 1];
	// size_t v011 = permutation[(size_t)permutation[(size_t)permutation[X - 0] + Y - 1] + Z - 1];
	// size_t v111 = permutation[(size_t)permutation[(size_t)permutation[X - 1] + Y - 1] + Z - 1];
	
	// f32 n000 = dot(grid000, rand_vec(v000));
	// f32 n100 = dot(grid100, rand_vec(v100));
	// f32 n010 = dot(grid010, rand_vec(v010));
	// f32 n110 = dot(grid110, rand_vec(v110));
	// f32 n001 = dot(grid001, rand_vec(v001));
	// f32 n101 = dot(grid101, rand_vec(v101));
	// f32 n011 = dot(grid011, rand_vec(v011));
	// f32 n111 = dot(grid111, rand_vec(v111));


	// f32 nx00 = lerp(u, n000, n100);
	// f32 nx01 = lerp(u, n001, n101);
	// f32 nx10 = lerp(u, n010, n110);
	// f32 nx11 = lerp(u, n011, n111);

	// f32 nxy0 = lerp(v, nx00, nx10);
	// f32 nxy1 = lerp(v, nx01, nx11);

	// return lerp(w, nxy0, nxy1);
}

f32 fractal_perlin(f32 x, f32 y, f32 z, size_t octaves, f32 roughness, f32 lacunarity) {
	f32 scale = 1.f;
	f32 amp = 1.0f;
	f32 maxamp = 0.0f;
	f32 sum = 0.0f;

	for (size_t i = 0; i < octaves; i += 1) {
		f32 t = perlin(x * scale, y * scale, z * scale);
		sum += t * amp;
		maxamp += amp;
		amp *= roughness;
		scale *= lacunarity;
	}

	return sum;
}
